buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.29.0'
        classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:2.5.2"
    }
}

apply plugin: 'java-library'
apply plugin: 'com.vanniktech.maven.publish'

//Obviously, change the next line to match your project name.
def projectName = 'libgdx-library-template'

//Change this to whatever Maven Central group you might publish to,
//which is probably not this one if you aren't Tommy Ettinger.
group 'com.github.tommyettinger'

version "$VERSION_NAME" // You can set the version in gradle.properties .

import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

// This just makes sure that a Javadoc JAR and a sources JAR are produced.
mavenPublishing {
    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
}

// This sets the Javadoc JAR to have hopefully the correct name. This may need adjustment.
mavenPlainJavadocJar.archiveBaseName.set(projectName)

// There's pretty much no reason to use any encoding other than UTF-8 .
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

// Disable JDK 8's doclint
// http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc).tap {
            configureEach {
                // The -quiet is because of some sort of weird JDK JavaCompiler bug:
                // https://discuss.gradle.org/t/passing-arguments-to-compiler-and-javadoc/1661
                options.addStringOption('Xdoclint:none,-missing', '-quiet')
            }
        }
    }
}

compileJava {
	// The default Java language level this targets is 8, which is as low as current
    // (Java 20 and newer) JDKs will permit you to target.
    // Targeting Java 7 is the lowest version you could need to go at this point, and
    // to target 7 you need to be using Java 19 or lower. The default used for JitPack
    // builds in this configuration uses Java 21 to build, so you would need to change
    // jitpack.yml to use openjdk17 instead of openjdk21 if you really want to target 7.
	// libGDX itself targets a mix of Java 7 (for most backends) and 8 (for LWJGL3).
    // You must use 8 if any libraries you use need Java 8 (some that
    // come to mind are simple-graphs and jdkgdxds, plus anything that needs LWJGL3).
    sourceCompatibility = 8
    targetCompatibility = 8
    if (JavaVersion.current().isJava9Compatible()) {
        options.release.set(8)
    }
}

compileTestJava {
	// LWJGL3 needs Java 8 starting in libGDX 1.11.0, which forces tests that use LWJGL3
	// to use Java 8 or higher. Using options.release enforces compatibility with Java 8,
	// including how NIO Buffers behave (which broke compatibility in Java 9).
    sourceCompatibility = 8
    targetCompatibility = 8
    if (JavaVersion.current().isJava9Compatible()) {
        options.release.set(8)
    }
}

// JavaDocs will be published inside the docs/ folder, which you can easily put on GitHub Pages
// in your repo settings.
// You may instead want to remove this line if frequent doc changes use up too much repo space,
// or if you use a different version control host that doesn't host HTML like this.
javadoc.destinationDir = file('docs/apidocs')

apply plugin: 'idea'
// This makes IDEA avoid including generated JavaDocs (which are HTML files) in any search results.
// If you changed where JavaDocs are published above, you should change the next line, too.
idea.module.excludeDirs += [file("docs/")]

jar {
    archiveBaseName.set(projectName)
    manifest {
        attributes 'Implementation-Title': projectName, 'Implementation-Version': archiveVersion
    }
}

repositories {
    // You can uncomment mavenLocal() if you need self-built versions, but it can be a problem with GWT or other sources dependencies.
    //mavenLocal()
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    // JitPack is a good repo to have if you depend on commit versions.
    // Having the below repo might cause problems if uploading to Maven Central.
    maven { url 'https://jitpack.io' }
}

dependencies {
    api "com.badlogicgames.gdx:gdx:$gdxVersion"

    testImplementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    testImplementation "junit:junit:4.13.2"
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

jnigen {
    sharedLibName = "newtext"
    all {
        headerDirs = ["harfbuzz/src", "freetype/include"]
        cIncludes = [
                "harfbuzz/src/hb.cc",
                "harfbuzz/src/hb-blob.cc",
                "harfbuzz/src/hb-buffer.cc",
                "harfbuzz/src/hb-buffer-verify.cc",
                "harfbuzz/src/hb-buffer-serialize.cc",
                "harfbuzz/src/hb-common.cc",
                "harfbuzz/src/hb-deprecated.cc",
                "harfbuzz/src/hb-draw.cc",
                "harfbuzz/src/hb-face.cc",
                "harfbuzz/src/hb-font.cc",
                "harfbuzz/src/hb-map.cc",
                "harfbuzz/src/hb-paint.cc",
                "harfbuzz/src/hb-paint-extents.cc",
                "harfbuzz/src/hb-set.cc",
                "harfbuzz/src/hb-shape.cc",
                "harfbuzz/src/hb-shape-plan.cc",
                "harfbuzz/src/hb-style.cc",
                "harfbuzz/src/hb-unicode.cc",
                "harfbuzz/src/hb-version.cc",
                "harfbuzz/src/hb-static.cc",
                "harfbuzz/src/hb-null.cc",
                "harfbuzz/src/hb-number.cc",
                "harfbuzz/src/hb-serialize.cc",
                "harfbuzz/src/hb-fallback-shape.cc",
                "harfbuzz/src/hb-info.cc",
                "harfbuzz/src/hb-ucd.cc",
                "harfbuzz/src/hb-shaper.cc",
                "harfbuzz/src/hb-outline.cc",

                "harfbuzz/src/hb-ft.cc",

                "harfbuzz/src/hb-aat-layout.cc",
                "harfbuzz/src/hb-aat-map.cc",

                "harfbuzz/src/hb-ot.cc",
                "harfbuzz/src/hb-ot-tag.cc",
                "harfbuzz/src/hb-ot-deprecated.cc",
                "harfbuzz/src/hb-ot-face.cc",
                "harfbuzz/src/hb-ot-font.cc",
                "harfbuzz/src/hb-ot-color.cc",
                "harfbuzz/src/hb-ot-metrics.cc",
                "harfbuzz/src/hb-ot-cff1-table.cc",
                "harfbuzz/src/hb-ot-cff2-table.cc",
                "harfbuzz/src/hb-ot-paint.cc",
                "harfbuzz/src/hb-ot-paint-extents.cc",
                "harfbuzz/src/hb-ot-shape.cc",
                "harfbuzz/src/hb-ot-shape-fallback.cc",
                "harfbuzz/src/hb-ot-shape-normalize.cc",
                "harfbuzz/src/hb-ot-var.cc",
                "harfbuzz/src/hb-ot-layout.cc",
                "harfbuzz/src/hb-ot-map.cc",
                "harfbuzz/src/hb-ot-shaper.cc",
                "harfbuzz/src/hb-ot-shaper-default.cc",
                "harfbuzz/src/hb-ot-shaper-arabic.cc",
                "harfbuzz/src/hb-ot-shaper-dumber.cc",
                "harfbuzz/src/hb-ot-shaper-hangul.cc",
                "harfbuzz/src/hb-ot-shaper-hebrew.cc",
                "harfbuzz/src/hb-ot-shaper-myanmar.cc",
                "harfbuzz/src/hb-ot-shaper-thai.cc",
                "harfbuzz/src/hb-ot-shaper-indic.cc",
                "harfbuzz/src/hb-ot-shaper-indic-table.cc",
                "harfbuzz/src/hb-ot-shaper-use.cc",
                "harfbuzz/src/hb-ot-shaper-khmer.cc",
                "harfbuzz/src/hb-ot-shaper-syllabic.cc",
                "harfbuzz/src/hb-ot-shaper-vowel-constraints.cc",


                // BASE
                "freetype/src/base/ftsystem.c",
                "freetype/src/base/ftinit.c",
                "freetype/src/base/ftdebug.c",
                "freetype/src/base/ftbase.c",
                "freetype/src/base/ftbbox.c",
                "freetype/src/base/ftglyph.c",
                "freetype/src/base/ftbdf.c",
                "freetype/src/base/ftbitmap.c",
                "freetype/src/base/ftcid.c",
                "freetype/src/base/ftfstype.c",
                "freetype/src/base/ftgasp.c",
                "freetype/src/base/ftgxval.c",
                "freetype/src/base/ftmm.c",
                "freetype/src/base/ftotval.c",
                "freetype/src/base/ftpatent.c",
                "freetype/src/base/ftpfr.c",
                "freetype/src/base/ftstroke.c",
                "freetype/src/base/ftsynth.c",
                "freetype/src/base/fttype1.c",
                "freetype/src/base/ftwinfnt.c",
                "freetype/src/base/ftxf86.c",
                // "freetype/src/base/ftmac.c",

                "freetype/src/svg/ftsvg.c",

                // DRIVERS
                "freetype/src/bdf/bdf.c",
                "freetype/src/cff/cff.c",
                "freetype/src/cid/type1cid.c",
                "freetype/src/pcf/pcf.c",
                "freetype/src/pfr/pfr.c",
                "freetype/src/sdf/sdf.c",
                "freetype/src/sfnt/sfnt.c",
                "freetype/src/truetype/truetype.c",
                "freetype/src/type1/type1.c",
                "freetype/src/type42/type42.c",
                "freetype/src/winfonts/winfnt.c",
                // RASTERIZERS
                "freetype/src/raster/raster.c",
                "freetype/src/smooth/smooth.c",
                // AUX
                "freetype/src/autofit/autofit.c",
                "freetype/src/cache/ftcache.c",
                "freetype/src/gzip/ftgzip.c",
                "freetype/src/lzw/ftlzw.c",
                "freetype/src/bzip2/ftbzip2.c",
                "freetype/src/gxvalid/gxvalid.c",
                "freetype/src/otvalid/otvalid.c",
                "freetype/src/psaux/psaux.c",
                "freetype/src/pshinter/pshinter.c",
                "freetype/src/psnames/psnames.c"
        ]

        cppExcludes = ["harfbuzz/subprojects/", "freetype/subprojects/"]

        cFlags += " -DFT2_BUILD_LIBRARY "
        cFlags += System.getenv("CC_FLAGS") ?: ""
        cppFlags += " -DFT2_BUILD_LIBRARY "
        cppFlags += System.getenv("CPP_FLAGS") ?: ""
    }
    add(Windows, x32)
    add(Windows, x64)
    add(Linux, x64)
    add(Linux, x32, ARM)
    add(Linux, x64, ARM)
    add(Linux, x64, RISCV)
    add(MacOsX, x64) {
        linkerFlags += " -framework CoreServices -framework Carbon"
    }
    add(MacOsX, x64, ARM) {
        linkerFlags += " -framework CoreServices -framework Carbon"
    }
    add(Android)
    add(IOS)
}

sourceSets {
    main {
        resources {
            srcDirs += 'libs/windows64'
        }
    }
}
